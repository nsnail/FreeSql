<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddFreeDbContextError_CheckConstruction" xml:space="preserve">
    <value>FreeSql: An error occurred in AddFreeDbContext, check that the construction parameters of {dbContextTypeName} have been injected correctly</value>
  </data>
  <data name="CannotAdd_AlreadyExistsInStateManagement" xml:space="preserve">
    <value>FreeSql: Not addable, already exists in state management: {entityString}</value>
  </data>
  <data name="CannotAdd_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>FreeSql: Not addable, entity has no primary key: {entityString}</value>
  </data>
  <data name="CannotAdd_PrimaryKey_NotSet" xml:space="preserve">
    <value>FreeSql: Not addable, no value for primary key set: {entityString}</value>
  </data>
  <data name="CannotAdd_SelfIncreasingHasValue" xml:space="preserve">
    <value>FreeSql: Not addable, self-increasing attribute has value: {entityString}</value>
  </data>
  <data name="CannotAttach_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>FreeSql: Not attachable, entity has no primary key: {entityString}</value>
  </data>
  <data name="CannotAttach_PrimaryKey_NotSet" xml:space="preserve">
    <value>FreeSql: Not attachable, no value for primary key set: {entityString}</value>
  </data>
  <data name="CannotDelete_DataNotTracked_ShouldQuery" xml:space="preserve">
    <value>FreeSql: Not deletable, data not tracked, should query first: {entityString}</value>
  </data>
  <data name="CannotDelete_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>FreeSql: Not deletable, entity has no primary key: {entityString}</value>
  </data>
  <data name="CannotDelete_PrimaryKey_NotSet" xml:space="preserve">
    <value>FreeSql: Not deletable, no value for primary key set: {entityString}</value>
  </data>
  <data name="CannotEdit_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>FreeSql: Not editable, entity has no primary key: {entityString}</value>
  </data>
  <data name="CannotUpdate_DataShouldQueryOrAttach" xml:space="preserve">
    <value>FreeSql: Not updatable, data not tracked, should be queried first or Attach:{entityString}</value>
  </data>
  <data name="CannotUpdate_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>FreeSql: Not updatable, entity has no primary key: {entityString}</value>
  </data>
  <data name="CannotUpdate_PrimaryKey_NotSet" xml:space="preserve">
    <value>FreeSql: Not updatable, no value for primary key set: {entityString}</value>
  </data>
  <data name="CannotUpdate_RecordDoesNotExist" xml:space="preserve">
    <value>FreeSql: Not updatable, the record does not exist in the database: {entityString}</value>
  </data>
  <data name="ConfigureUseFreeSql" xml:space="preserve">
    <value>FreeSql: Please configure UseFreeSql in OnConfiguring or AddFreeDbContext</value>
  </data>
  <data name="DbSetAsType_NotSupport_Object" xml:space="preserve">
    <value>FreeSql: DbSet. AsType parameter error, please pass in the correct entity type</value>
  </data>
  <data name="EntityType_CannotConvert" xml:space="preserve">
    <value>FreeSql: Entity type {EntityTypeName} cannot be converted to {name} and cannot use this method</value>
  </data>
  <data name="EntityType_PrimaryKeyError" xml:space="preserve">
    <value>FreeSql: Entity type {EntityTypeName} Primary key type is not {fullName} and cannot be used with this method</value>
  </data>
  <data name="EntityType_PrimaryKeyIsNotOne" xml:space="preserve">
    <value>FreeSql: Entity type {EntityTypeName} Primary key number is not 1 and cannot be used with this method</value>
  </data>
  <data name="FailedSetFilter_NotBelongIRpository" xml:space="preserve">
    <value>FreeSql: FreeSql. Repository failed to set filter because object does not belong to IRepository</value>
  </data>
  <data name="Incomparable_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>FreeSql: Not comparable, entity has no primary key: {entityString}</value>
  </data>
  <data name="Incomparable_PrimaryKey_NotSet" xml:space="preserve">
    <value>FreeSql: Non-comparable, no value for primary key set: {entityString}</value>
  </data>
  <data name="InsertError_Filter" xml:space="preserve">
    <value>FreeSql: FreeSql.Repository Insert failed because the filter {filterKey}: {filterValueExpression} was set and the inserted data does not conform to {entityString}</value>
  </data>
  <data name="ISelectAsType_ParameterError" xml:space="preserve">
    <value>FreeSql: ISelect. AsType parameter does not support specifying as object</value>
  </data>
  <data name="NotFound_Property" xml:space="preserve">
    <value>FreeSql: Property {propertyName} does not exist for {tableTypeFullName}</value>
  </data>
  <data name="NotFoundMethod_StatesRemoveByObjects" xml:space="preserve">
    <value>FreeSql: Method DbSet&lt;&gt; not found. StatesRemoveByObjects</value>
  </data>
  <data name="ParameterDataTypeError" xml:space="preserve">
    <value>FreeSql: Parameter data type error {entityTypeFullName}</value>
  </data>
  <data name="ParameterError" xml:space="preserve">
    <value>FreeSql: Parameter error {param}</value>
  </data>
  <data name="ParameterError_CannotBeNull" xml:space="preserve">
    <value>FreeSql: Parameter error {param} cannot be null</value>
  </data>
  <data name="ParameterError_IsNot_CollectionProperties" xml:space="preserve">
    <value>FreeSql: Parameter error {many} is not a collection property</value>
  </data>
  <data name="ParameterError_NotFound_CollectionProperties" xml:space="preserve">
    <value>FreeSql: Parameter error {many} Collection property does not exist</value>
  </data>
  <data name="ParameterError_NotFound_Property" xml:space="preserve">
    <value>FreeSql: Parameter error {one} attribute does not exist</value>
  </data>
  <data name="Propagation_Mandatory" xml:space="preserve">
    <value>FreeSql: Propagation_ Mandatory: With the current transaction, throw an exception if there is no current transaction</value>
  </data>
  <data name="Propagation_Never" xml:space="preserve">
    <value>FreeSql: Propagation_ Never: Perform the operation non-transactionally and throw an exception if the current transaction exists</value>
  </data>
  <data name="PropertyOfType_IsNot_OneToManyOrManyToMany" xml:space="preserve">
    <value>FreeSql: Property {propertyName} of type {tableTypeFullName} is not OneToMany or ManyToMany attribute</value>
  </data>
  <data name="SpecialError_BatchAdditionFailed" xml:space="preserve">
    <value>FreeSql: Special error: Bulk add failed, {dataType} returned data, does not match the number added</value>
  </data>
  <data name="SpecialError_UpdateFailedDataNotTracked" xml:space="preserve">
    <value>FreeSql: Special error: Update failed, data not tracked: {entityString}</value>
  </data>
  <data name="TransactionHasBeenStarted" xml:space="preserve">
    <value>FreeSql: Transaction opened, unit of work cannot be disabled</value>
  </data>
  <data name="TypeHasSetProperty_IgnoreAttribute" xml:space="preserve">
    <value>FreeSql: The {tableTypeFullName} type has set the property {propertyName} Ignore the attribute</value>
  </data>
  <data name="UnitOfWorkManager_Construction_CannotBeNull" xml:space="preserve">
    <value>FreeSql: The {unitOfWorkManager} constructor parameter {fsql} cannot be null</value>
  </data>
  <data name="UpdateError_Filter" xml:space="preserve">
    <value>FreeSql: FreeSql.Repository Update failed because the filter {filterKey}: {filterValueExpression} is set and the updated data does not conform to {entityString}</value>
  </data>
</root>