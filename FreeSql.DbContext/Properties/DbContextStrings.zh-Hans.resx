<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddFreeDbContextError_CheckConstruction" xml:space="preserve">
    <value>AddFreeDbContext 发生错误，请检查 {dbContextTypeName} 的构造参数都已正确注入</value>
  </data>
  <data name="CannotAdd_AlreadyExistsInStateManagement" xml:space="preserve">
    <value>不可添加，已存在于状态管理：{entityString}</value>
  </data>
  <data name="CannotAdd_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>不可添加，实体没有主键：{entityString}</value>
  </data>
  <data name="CannotAdd_PrimaryKey_NotSet" xml:space="preserve">
    <value>不可添加，未设置主键的值：{entityString}</value>
  </data>
  <data name="CannotAdd_SelfIncreasingHasValue" xml:space="preserve">
    <value>不可添加，自增属性有值：{entityString}</value>
  </data>
  <data name="CannotAttach_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>不可附加，实体没有主键：{entityString}</value>
  </data>
  <data name="CannotAttach_PrimaryKey_NotSet" xml:space="preserve">
    <value>不可附加，未设置主键的值：{entityString}</value>
  </data>
  <data name="CannotDelete_DataNotTracked_ShouldQuery" xml:space="preserve">
    <value>不可删除，数据未被跟踪，应该先查询：{entityString}</value>
  </data>
  <data name="CannotDelete_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>不可删除，实体没有主键：{entityString}</value>
  </data>
  <data name="CannotDelete_PrimaryKey_NotSet" xml:space="preserve">
    <value>不可删除，未设置主键的值：{entityString}</value>
  </data>
  <data name="CannotEdit_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>不可进行编辑，实体没有主键：{entityString}</value>
  </data>
  <data name="CannotUpdate_DataShouldQueryOrAttach" xml:space="preserve">
    <value>不可更新，数据未被跟踪，应该先查询 或者 Attach：{entityString}</value>
  </data>
  <data name="CannotUpdate_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>不可更新，实体没有主键：{entityString}</value>
  </data>
  <data name="CannotUpdate_PrimaryKey_NotSet" xml:space="preserve">
    <value>不可更新，未设置主键的值：{entityString}</value>
  </data>
  <data name="CannotUpdate_RecordDoesNotExist" xml:space="preserve">
    <value>不可更新，数据库不存在该记录：{entityString}</value>
  </data>
  <data name="ConfigureUseFreeSql" xml:space="preserve">
    <value>请在 OnConfiguring 或 AddFreeDbContext 中配置 UseFreeSql</value>
  </data>
  <data name="DbSetAsType_NotSupport_Object" xml:space="preserve">
    <value>DbSet.AsType 参数错误，请传入正确的实体类型</value>
  </data>
  <data name="EntityType_CannotConvert" xml:space="preserve">
    <value>实体类型 {EntityTypeName} 无法转换为 {name}，无法使用该方法</value>
  </data>
  <data name="EntityType_PrimaryKeyError" xml:space="preserve">
    <value>实体类型 {EntityTypeName} 主键类型不为 {fullName}，无法使用该方法</value>
  </data>
  <data name="EntityType_PrimaryKeyIsNotOne" xml:space="preserve">
    <value>实体类型 {EntityTypeName} 主键数量不为 1，无法使用该方法</value>
  </data>
  <data name="FailedSetFilter_NotBelongIRpository" xml:space="preserve">
    <value>FreeSql.Repository 设置过滤器失败，原因是对象不属于 IRepository</value>
  </data>
  <data name="Incomparable_EntityHasNo_PrimaryKey" xml:space="preserve">
    <value>不可比较，实体没有主键：{entityString}</value>
  </data>
  <data name="Incomparable_PrimaryKey_NotSet" xml:space="preserve">
    <value>不可比较，未设置主键的值：{entityString}</value>
  </data>
  <data name="InsertError_Filter" xml:space="preserve">
    <value>FreeSql.Repository Insert 失败，因为设置了过滤器 {filterKey}: {filterValueExpression}，插入的数据不符合 {entityString}</value>
  </data>
  <data name="ISelectAsType_ParameterError" xml:space="preserve">
    <value>ISelect.AsType 参数不支持指定为 object</value>
  </data>
  <data name="NotFound_Property" xml:space="preserve">
    <value>{tableTypeFullName} 不存在属性 {propertyName}</value>
  </data>
  <data name="NotFoundMethod_StatesRemoveByObjects" xml:space="preserve">
    <value>找不到方法 DbSet&lt;&gt;.StatesRemoveByObjects</value>
  </data>
  <data name="ParameterDataTypeError" xml:space="preserve">
    <value>参数 data 类型错误 {entityTypeFullName} </value>
  </data>
  <data name="ParameterError" xml:space="preserve">
    <value>参数错误 {param}</value>
  </data>
  <data name="ParameterError_CannotBeNull" xml:space="preserve">
    <value>参数错误 {param} 不能为 null</value>
  </data>
  <data name="ParameterError_IsNot_CollectionProperties" xml:space="preserve">
    <value>参数错误 {many} 不是集合属性</value>
  </data>
  <data name="ParameterError_NotFound_CollectionProperties" xml:space="preserve">
    <value>参数错误 {many} 集合属性不存在</value>
  </data>
  <data name="ParameterError_NotFound_Property" xml:space="preserve">
    <value>参数错误 {one} 属性不存在</value>
  </data>
  <data name="Propagation_Mandatory" xml:space="preserve">
    <value>Propagation_Mandatory: 使用当前事务，如果没有当前事务，就抛出异常</value>
  </data>
  <data name="Propagation_Never" xml:space="preserve">
    <value>Propagation_Never: 以非事务方式执行操作，如果当前事务存在则抛出异常</value>
  </data>
  <data name="PropertyOfType_IsNot_OneToManyOrManyToMany" xml:space="preserve">
    <value>{tableTypeFullName} 类型的属性 {propertyName} 不是 OneToMany 或 ManyToMany 特性</value>
  </data>
  <data name="SpecialError_BatchAdditionFailed" xml:space="preserve">
    <value>特别错误：批量添加失败，{dataType} 的返回数据，与添加的数目不匹配</value>
  </data>
  <data name="SpecialError_UpdateFailedDataNotTracked" xml:space="preserve">
    <value>特别错误：更新失败，数据未被跟踪：{entityString}</value>
  </data>
  <data name="TransactionHasBeenStarted" xml:space="preserve">
    <value>已开启事务，不能禁用工作单元</value>
  </data>
  <data name="TypeHasSetProperty_IgnoreAttribute" xml:space="preserve">
    <value>{tableTypeFullName} 类型已设置属性 {propertyName} 忽略特性</value>
  </data>
  <data name="UnitOfWorkManager_Construction_CannotBeNull" xml:space="preserve">
    <value>{unitOfWorkManager} 构造参数 {fsql} 不能为 null</value>
  </data>
  <data name="UpdateError_Filter" xml:space="preserve">
    <value>FreeSql.Repository Update 失败，因为设置了过滤器 {filterKey}: {filterValueExpression}，更新的数据不符合{entityString}</value>
  </data>
</root>